/*!
 * Copyright (c) 2014 AceAxis Limited.
 * All Rights Reserved
 *
 * \file      Path.cpp
 * \brief     File path related utilities
 *
 * \date      12 Sept 2014
 * \author    dclark
 *
 * \details   File path related utilities
 *
 */

// C lib
#include <unistd.h>
#include <dirent.h>
#include <sys/stat.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/statvfs.h>

// C++
#include <fstream>
#include <iostream>
#include <sstream>
#include <algorithm>

#include "Path.h"

using namespace AceAxis;
using namespace std;


typedef struct stat Stat;

//-------------------------------------------------------------------------------------------------------------
int Path::mkdir(const std::string& path, mode_t mode)
{
    Stat            st;
    int             status = 0;

    if (stat(path.c_str(), &st) != 0)
    {
        /* Directory does not exist. EEXIST for race condition */
        if (::mkdir(path.c_str(), mode) != 0 && errno != EEXIST)
            status = -1;

    }
    else if (!S_ISDIR(st.st_mode))
    {
        errno = ENOTDIR;
        status = -1;
    }

    return(status);
}

//-------------------------------------------------------------------------------------------------------------
/**
** mkpath - ensure all directories in path exist
** Algorithm takes the pessimistic view and works top-down to ensure
** each directory in path exists, rather than optimistically creating
** the last element and working backwards.
*/
int Path::mkpath(const std::string& path, mode_t mode)
{
    char           *pp;
    char           *sp;
    int             status;
    char           *copypath = strdup(path.c_str());

    status = 0;
    pp = copypath;
    while (status == 0 && (sp = strchr(pp, '/')) != 0)
    {
        if (sp != pp)
        {
            /* Neither root nor double slash in path */
            *sp = '\0';
            status = Path::mkdir(copypath, mode);
            *sp = '/';
        }
        pp = sp + 1;
    }
    if (status == 0)
        status = Path::mkdir(path, mode);

    free(copypath);
    return (status);
}

//-------------------------------------------------------------------------------------------------------------
int Path::rmdir(const std::string& path)
{
	return ::rmdir(path.c_str()) ;
}

//-------------------------------------------------------------------------------------------------------------
int Path::remove(const std::string& path)
{
	return ::remove(path.c_str()) ;
}

//-------------------------------------------------------------------------------------------------------------
int Path::move(const std::string& oldpath, const std::string& newpath)
{
	return ::rename(oldpath.c_str(), newpath.c_str()) ;
}

//-------------------------------------------------------------------------------------------------------------
bool Path::isDir(const std::string& path)
{
	// check that it's a dir
	struct stat s;
	if( stat(path.c_str(), &s) != 0 )
		return false ;

    if( s.st_mode & S_IFDIR )
    	return true ;

    return false ;
}

//-------------------------------------------------------------------------------------------------------------
bool Path::isFile(const std::string& path)
{
	// check that it's a file
	struct stat s;
	if( stat(path.c_str(), &s) != 0 )
		return false ;

    if( s.st_mode & S_IFREG )
    	return true ;

    return false ;
}

//-------------------------------------------------------------------------------------------------------------
bool Path::isLink(const std::string& path)
{
	// check that it's a file
	struct stat s;
	if( stat(path.c_str(), &s) != 0 )
		return false ;

    if( s.st_mode & S_IFLNK )
    	return true ;

    return false ;
}

//-------------------------------------------------------------------------------------------------------------
bool Path::readLink(const std::string& path, std::string& link)
{
	char buff[1024];
	ssize_t len = ::readlink(path.c_str(), buff, sizeof(buff)-1);
	if (len == -1)
	{
		link = "" ;
		return false ;
	}

	buff[len] = '\0';
	link = buff ;
	return true;
}

//-------------------------------------------------------------------------------------------------------------
bool Path::createLink(const std::string& path, std::string link)
{
	if (symlink(link.c_str(), path.c_str()) == 0)
		return true ;

	return false ;
}

//-------------------------------------------------------------------------------------------------------------
std::vector<std::string> Path::dirContents(const std::string& directory)
{
	std::vector<std::string> contents ;
	if (directory.empty())
		return contents ;

	// open directory
	DIR *dirp = opendir(directory.c_str()) ;
	if (!dirp)
		return contents ;

	// Ensure directory has '/' suffix
	std::string dirStr(directory) ;
	if (dirStr[dirStr.length()-1] != '/')
		dirStr += "/" ;

	// Allocate a suitably sized buffer
	long name_max = pathconf(dirStr.c_str(), _PC_NAME_MAX);
	if (name_max == -1)         /* Limit not defined, or error */
	    name_max = 255;         /* Take a guess */
	// can't use the gcc recommended method of calculating the size of the buffer to allocate (gcc4.8.1 g++ doesn't
	// provide offsetof) but allocating the whole size of the structure + a buffer for the maximum name size
	// should provide ample space (though there's some controversy: http://womble.decadent.org.uk/readdir_r-advisory.html
	// who would have thought reading a directory would be such a pain!)
	//
//	size_t len = offsetof(struct dirent, d_name) + name_max + 1;
	size_t len = sizeof(struct dirent) + name_max + 1;
	struct dirent *dbuffp = (struct dirent *)malloc(len);

	// read the directory
	while(true)
	{
		struct dirent *dp ;
		readdir_r(dirp, dbuffp, &dp) ;
		if (dp == NULL)
			break ;

		std::string name(dp->d_name) ;
		if ((name == ".") || (name == ".."))
			continue ;

		std::string path(dirStr + name) ;

		// add to list
		contents.push_back(path) ;
	}

	// close
	closedir(dirp) ;

	free(dbuffp) ;


	return contents ;
}

//-------------------------------------------------------------------------------------------------------------
bool Path::exists(const std::string& path)
{
	struct stat s;
	if( stat(path.c_str(), &s) != 0 )
		return false ;

	return true ;
}

//-------------------------------------------------------------------------------------------------------------
std::string Path::basename(const std::string& path)
{
	std::size_t sepPos(path.find_last_of("/")) ;
	if (sepPos == std::string::npos)
		return path ;

	return path.substr(sepPos+1) ;
}

//-------------------------------------------------------------------------------------------------------------
std::string Path::dir(const std::string& path)
{
	std::size_t sepPos(path.find_last_of("/")) ;
	if (sepPos == std::string::npos)
		return "" ;

	return path.substr(0, sepPos+1) ;
}

//-------------------------------------------------------------------------------------------------------------
bool Path::fileCopy(const std::string& src, const std::string& dst)
{
	std::ifstream source(src.c_str(), std::ios::binary);
	if (!source.is_open())
		return false ;
	std::ofstream dest(dst.c_str(), std::ios::binary);
	if (!dest.is_open())
		return false ;

	dest << source.rdbuf() ;
	source.close() ;
	dest.close() ;
	return true ;
}

//-------------------------------------------------------------------------------------------------------------
unsigned Path::fileSize(const std::string& path)
{
	// check that it's a file
	struct stat s;
	if( ::stat(path.c_str(), &s) != 0 )
		return 0 ;

    if( !(s.st_mode & S_IFREG) )
    	return 0 ;

    return static_cast<unsigned>(s.st_size) ;
}


//---------------------------------------------------------------------
// Use statvfs to return the free space for the disk that contains the
// specified path.
//
// NOTE: To work, the path (file or directory) *MUST* exist!
//
unsigned long long Path::freeSpace(const std::string& path)
{
	unsigned long long result = 0;
	if (!exists(path))
		return result ;

	// sync the file system first - if this is a UBIFS filesystem then running sync will give a (slightly) more accurate result
	::sync() ;

	// get space
	struct statvfs sfs;
	if ( ::statvfs (path.c_str(), &sfs) != -1 )
	{
		result = (unsigned long long)sfs.f_bsize * sfs.f_bavail;
	}
	return result;
}
